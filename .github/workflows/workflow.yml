on:
  workflow_call:
    inputs:
      visibility:
        required: false
        type: string
      default-branch:
        required: false
        default: ${{ github.event.repository.default_branch }}
        type: string
      enable-ssh-agent:
        required: false
        default: false
        type: boolean
      enable-cachix:
        required: false
        default: false
        type: boolean
      cachix-cache:
        required: false
        default: ${{ github.event.sender.login }}
        type: string
      directory:
        required: false
        default: "."
        type: string
      build-docs:
        required: false
        default: false
        type: boolean
      docs-package:
        required: false
        default: "docs"
        type: string
      runner-map:
        required: false
        type: string
        default: |
          {
            "aarch64-darwin": "macos-latest",
            "x86_64-darwin": "macos-latest",
            "x86_64-linux": "ubuntu-latest",
            "i686-linux": "ubuntu-latest",
            "aarch64-linux": "ubuntu-24.04-arm"
          }
    outputs:
      flake_name:
        value: ${{ jobs.success.outputs.flake_name }}
        description: |
          Name of the flake.

          Example: DeterminateSystems/flakehub-push
      flake_version:
        value: ${{ jobs.success.outputs.flake_version }}
        description: |
          Version of the published flake.

          Example: 0.1.99+rev-2075013a3f3544d45a96f4b35df4ed03cd53779c
      flakeref_exact:
        value: ${{ jobs.success.outputs.flakeref_exact }}
        description: |
          A precise reference that always resolves to this to this exact release.

          Example: DeterminateSystems/flakehub-push/=0.1.99+rev-2075013a3f3544d45a96f4b35df4ed03cd53779c
      flakeref_at_least:
        value: ${{ jobs.success.outputs.flakeref_at_least }}
        description: |
          A loose reference to this release.
          Depending on this reference will require at least this version, and will also resolve to newer releases.
          This output is not sufficient for deployment pipelines, use flake_exact instead.

          Example: DeterminateSystems/flakehub-push/0.1.99+rev-2075013a3f3544d45a96f4b35df4ed03cd53779c

    secrets:
      ssh-private-key:
        required: false
      cachix-auth-token:
        required: false

jobs:
  inventory:
    runs-on: ubuntu-latest

    outputs:
      systems: ${{ steps.inventory.outputs.systems }}

    permissions:
      id-token: "write"
      contents: "read"

    steps:
      - uses: actions/checkout@v4
      # disabled pending strategy discussion on exposing tunables
      # - uses: Determinatesystems/flake-checker-action@main
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          flakehub: true
      - uses: cachix/cachix-action@v14
        if: ${{ inputs.enable-cachix }}
        with:
          name: ${{ inputs.cachix-cache }}
          authToken: ${{ secrets.cachix-auth-token }}
      - uses: webfactory/ssh-agent@v0.9.0
        if: ${{ inputs.enable-ssh-agent }}
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Inventory the flake for targeted systems
        id: inventory
        env:
          FLAKE_ITER_RUNNER_MAP: ${{ toJson(fromJson(inputs.runner-map)) }}
        working-directory: ${{ inputs.directory }}
        run: |
          nix run "https://flakehub.com/f/DeterminateSystems/flake-iter/*" -- systems
  build:
    runs-on: ${{ matrix.systems.runner }}
    needs: inventory
    strategy:
      matrix:
        systems: ${{ fromJSON(needs.inventory.outputs.systems) }}

    permissions:
      id-token: "write"
      contents: "read"

    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: cachix/cachix-action@v14
        if: ${{ inputs.enable-cachix }}
        with:
          name: ${{ inputs.cachix-cache }}
          authToken: ${{ secrets.cachix-auth-token }}
      - uses: webfactory/ssh-agent@v0.9.0
        if: ${{ inputs.enable-ssh-agent }}
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Build for ${{ matrix.systems.nix-system }}
        env:
          FLAKE_ITER_NIX_SYSTEM: ${{ matrix.systems.nix-system }}
        working-directory: ${{ inputs.directory }}
        run: nix run 'https://flakehub.com/f/DeterminateSystems/flake-iter/*' -- --verbose build

  success:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }}
    permissions:
      id-token: "write"
      contents: "write"
      pages: "write"

    outputs:
      flake_name: ${{ steps.publish.outputs.flake_name }}
      flake_version: ${{ steps.publish.outputs.flake_version }}
      flakeref_exact: ${{ steps.publish.outputs.flakeref_exact }}
      flakeref_at_least: ${{ steps.publish.outputs.flakeref_at_least }}
    steps:
      - run: "true"
      - run: |
          echo "A dependent in the build matrix failed."
          exit 1
        if: |
          contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
      - uses: actions/checkout@main
        if: ${{ !github.repository.fork && (inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) || inputs.build-docs) }}
      - uses: DeterminateSystems/nix-installer-action@main
        if: ${{ !github.repository.fork && (inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) || inputs.build-docs) }}
        with:
          flakehub: true
      - uses: cachix/cachix-action@v14
        if: ${{ inputs.enable-cachix && !github.repository.fork && inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
        with:
          name: ${{ inputs.cachix-cache }}
          authToken: ${{ secrets.cachix-auth-token }}
      - uses: "DeterminateSystems/flakehub-push@main"
        if: ${{ !github.repository.fork && inputs.visibility != '' && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
        id: publish
        with:
          rolling: ${{ github.ref == format('refs/heads/{0}', inputs.default-branch) }}
          visibility: ${{ inputs.visibility }}
          include-output-paths: true
          directory: ${{ inputs.directory }}
          
      # Build and deploy documentation
      - name: Build documentation
        if: ${{ inputs.build-docs && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
        working-directory: ${{ inputs.directory }}
        run: nix build ".#${{ inputs.docs-package }}"
        
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: ${{ inputs.build-docs && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ inputs.directory }}/result
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'docs: update documentation from ${{ github.sha }}'
      
      # Enable GitHub Pages
      - name: Enable GitHub Pages
        if: ${{ inputs.build-docs && (github.ref == format('refs/heads/{0}', inputs.default-branch) || startsWith(github.ref, 'refs/tags/')) }}
        run: |
          echo "Enabling GitHub Pages for $GITHUB_REPOSITORY..."
          
          # Try to create GitHub Pages first, if it fails, try to update it
          echo '{"source": {"branch": "gh-pages", "path": "/"}}' | gh api --method POST "repos/$GITHUB_REPOSITORY/pages" --input - || {
            echo "GitHub Pages might already be enabled, trying to update configuration..."
            echo '{"source": {"branch": "gh-pages", "path": "/"}}' | gh api --method PUT "repos/$GITHUB_REPOSITORY/pages" --input -
          }
          
          # Poll for GitHub Pages status with exponential backoff
          echo "Waiting for GitHub Pages to be enabled..."
          
          attempt=1
          max_attempts=10
          initial_wait=2
          wait_time=$initial_wait
          success=false
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts (waiting ${wait_time}s between attempts)..."
            
            # Try to get the GitHub Pages status
            if pages_url=$(gh api repos/$GITHUB_REPOSITORY/pages --jq '.html_url' 2>/dev/null); then
              echo "✅ GitHub Pages successfully enabled!"
              echo "Site will be available at: $pages_url"
              success=true
              break
            fi
            
            # Wait before the next attempt with exponential backoff
            echo "GitHub Pages not ready yet, waiting..."
            sleep $wait_time
            
            # Increase wait time for next attempt (exponential backoff)
            wait_time=$((wait_time * 2))
            attempt=$((attempt + 1))
          done
          
          if [ "$success" != "true" ]; then
            echo "⚠️ Reached maximum number of attempts. GitHub Pages may still be being set up."
            echo "You can check the status in the repository settings or by running: gh api repos/$GITHUB_REPOSITORY/pages"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
